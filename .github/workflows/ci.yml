# This workflow is triggered on pushes to the dev branch
# Any changes to any YAML file are scanned by checkov and automatically tested
# Upon successful applicable scanning and testing, a pull request for merging only action.yaml and README.md (as required by GitHub Marketplace) to main is created.
name: Setup Nodejs Project CI
# Trigger on pushes to branches other than main
on:
  push:
    branches:
      - dev

# Define concurrency group to prevent overlapping runs
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Define permissions for the workflow
permissions:
  contents: write

# Define jobs for the workflow
jobs:
  # Define shared variables
  shared-variables:
    runs-on: ubuntu-latest
    outputs:
      default-nodejs-version: ${{ steps.set-vars.outputs.default-nodejs-version }}
      default-python-version: ${{ steps.set-vars.outputs.default-python-version }}
      default-checkov-version: ${{ steps.set-vars.outputs.default-checkov-version }}
    steps:
      - name: Set shared variables
        id: set-vars
        run: |
          echo "default-nodejs-version=22" >> $GITHUB_OUTPUT
          echo "default-python-version=3.12" >> $GITHUB_OUTPUT
          echo "default-checkov-version=3.2.414" >> $GITHUB_OUTPUT

  # Detect changed files and scan, if applicable
  detect-and-scan:
    needs: shared-variables
    runs-on: ubuntu-latest
    outputs:
      CHANGED_YAML_FILES: ${{ steps.detect.outputs.CHANGED_YAML_FILES }}
      ACTION_CHANGED: ${{ steps.detect.outputs.ACTION_CHANGED }}
      README_CHANGED: ${{ steps.detect.outputs.README_CHANGED }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0   # Fetch entire history
          fetch-tags: true # Fetch existing tags

      # It's often safer to explicitly fetch main after a depth 0 checkout
      - name: Fetch latest main
        run: git fetch origin main --no-tags --no-recurse-submodules

      - name: Detect changed YAML files
        id: detect
        run: |
          # Get a list of added or modified files compared to origin/main
          changed_files=$(git diff --diff-filter=AM --name-only origin/main...HEAD)

          # Filter only .yml or .yaml files (case-insensitive)
          yaml_files=$(echo "$changed_files" | grep -Ei '\.ya?ml$' | xargs || true)

          # Check if action.yml has changed
          action_changed=$(echo "$changed_files" | grep -Fx 'action.yml' || true)

          # Check if README.md has changed (case-insensitive)
          readme_changed=$(echo "$changed_files" | grep -iFx 'README.md' || true)
       
          # Export to environment and output
          echo "CHANGED_YAML_FILES=${yaml_files}" | tee -a $GITHUB_ENV $GITHUB_OUTPUT > /dev/null
          echo "ACTION_CHANGED=${action_changed}" | tee -a $GITHUB_ENV $GITHUB_OUTPUT > /dev/null
          echo "README_CHANGED=${readme_changed}" | tee -a $GITHUB_ENV $GITHUB_OUTPUT > /dev/null
      
      - name: Set up Python
        if: env.CHANGED_YAML_FILES != ''
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ needs.shared-variables.outputs.default-python-version }}

      - name: Cache Python packages
        if: env.CHANGED_YAML_FILES != ''
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/action.yml') }}
  
      - name: Install Checkov
        if: env.CHANGED_YAML_FILES != ''
        run: pip install checkov==${{ needs.shared-variables.outputs.default-checkov-version }}
  
      - name: Run Checkov Scan
        if: env.CHANGED_YAML_FILES != ''
        run: checkov $(printf -- '-f %s ' ${{ env.CHANGED_YAML_FILES }}) \
               --framework yaml --framework github_actions

  # Test, if applicable
  test:
    name: Test setup-nodejs composite action
    needs: [shared-variables, detect-and-scan]
    runs-on: ubuntu-latest
    if: ${{ needs.detect-and-scan.outputs.CHANGED_YAML_FILES }} != ''
    strategy:
      matrix:
        package-manager: [npm, yarn, pnpm]

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Generate test project
        run: make ${{ matrix.package-manager }}

      - name: Run setup-nodejs-project
        uses: ./
        with:
          working-directory: test-projects/${{ matrix.package-manager }}
          lock-file: ${{ matrix.package-manager == 'npm' && 'package-lock.json' || matrix.package-manager == 'yarn' && 'yarn.lock' || 'pnpm-lock.yaml' }}

      - name: Verify axios is installed
        run: |
          # Verify that axios is installed by checking if it exists in node_modules
          if [ ! -d "test-projects/${{ matrix.package-manager }}/node_modules/axios" ]; then
            echo "::error::Axios not found in node_modules!"
            exit 1
          fi
          echo "âœ… Axios is installed for ${{ matrix.package-manager }}"

  # Push changes to action.yml and/or README.md into main
  push-to-main:
    runs-on: ubuntu-latest
    needs: [detect-and-scan, test]
    # Only run PR creation if action.yml and/or README.md is/are changed
    if: ${{ needs.detect-and-scan.outputs.ACTION_CHANGED }} != '' || ${{ needs.detect-and-scan.outputs.README_CHANGED }} != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Cherry-pick only relevant files to merge into main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Fetch and checkout main
          git fetch origin main
          git checkout main

          # Copy only the relevant files from dev
          git checkout dev -- action.yml README.md

          # Commit if there are changes
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git commit -am "Auto-sync from dev"
            git push origin main
          fi