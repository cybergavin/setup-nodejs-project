name: cybergavin/setup-nodejs-project
author: Cybergavin - https://github.com/cybergavin
description: >
  Sets up a specified Node.js version, caches node modules based on the lock file,
  and installs dependencies conditionally if the cache is missed. Supports npm, yarn, and pnpm.

inputs:
  node-version:
    description: >
      The Node.js version or version range to use (e.g., '18', '20.x', '>=16').
      Uses the same syntax as actions/setup-node.
    required: false
    default: '22'
  cache-path:
    description: >
      The path(s) to cache (usually node_modules). Relative to the working-directory.
      Multiple paths can be specified on separate lines.
    required: false
    default: node_modules
  lock-file:
    description: >
      The name of the lock file (e.g., 'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml').
      Relative to the working-directory. Used for cache key and command detection.
    required: true
    
  working-directory:
    description: >
      The directory containing the Node.js project (where package.json and the lock file are).
      Relative to the repository root. Defaults to the repository root.
    required: false
    default: .
  install-command:
    description: >
      An optional command to override the auto-detected install command (npm ci,
      yarn install --frozen-lockfile, pnpm install --frozen-lockfile).
      Runs in the specified working-directory.
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0 - Use a stable ref
      with:
        node-version: ${{ inputs.node-version }}

    - name: Cache node modules
      id: cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3 - Use a stable ref
      with:
        # Path to cache is relative to the workspace root
        # Construct the path using the working-directory and cache-path inputs
        path: ${{ format('{0}/{1}', inputs.working-directory, inputs.cache-path) }}
        # The cache key uniquely identifies the cache based on OS, Node version, and the lock file content
        key: ${{ runner.os }}-node-${{ inputs.node-version }}-${{ hashFiles(format('{0}/{1}', inputs.working-directory, inputs.lock-file)) }}
        # Restore keys provide fallbacks for cache misses (e.g., minor Node version changes)
        restore-keys: |
          ${{ runner.os }}-node-${{ inputs.node-version }}-
          ${{ runner.os }}-node-
          # Fallback key without version in case of broader changes

    - name: Install dependencies
      # This step only runs if the 'Cache node modules' step resulted in a cache miss
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      # Set the working directory for this specific run step where the install command will execute
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Determine the install command based on the lock file name or the provided install-command input
        LOCK_FILE_NAME=$(basename "${{ inputs.lock-file }}")
        INSTALL_CMD=""

        # Check if a custom install command was provided
        if [ -n "${{ inputs.install-command }}" ]; then
          INSTALL_CMD="${{ inputs.install-command }}"
        # Otherwise, infer the command based on the lock file name
        elif [ "$LOCK_FILE_NAME" == "package-lock.json" ]; then
          INSTALL_CMD="npm ci" # npm ci is recommended for CI builds
        elif [ "$LOCK_FILE_NAME" == "yarn.lock" ]; then
          INSTALL_CMD="yarn install --frozen-lockfile" # --frozen-lockfile is recommended for CI builds
        elif [ "$LOCK_FILE_NAME" == "pnpm-lock.yaml" ]; then
          INSTALL_CMD="pnpm install --frozen-lockfile" # --frozen-lockfile is recommended for CI builds
        else
          # If no custom command and no recognized lock file, print an error and exit
          echo "::error::Could not determine install command for lock file '$LOCK_FILE_NAME'. Please provide the 'install-command' input or use a supported lock file (package-lock.json, yarn.lock, pnpm-lock.yaml)."
          exit 1
        fi

        # Execute the determined or provided install command
        echo "Running install command: $INSTALL_CMD"
        # The command runs in the working-directory specified for this step
        $INSTALL_CMD